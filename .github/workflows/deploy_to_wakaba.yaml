name: Deploy to wakaba

on:
  push:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache Cargo
        id: cache-cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./**/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build wakaba_game_service_manage_api
        run: cargo build --release -p wakaba_game_service_manage_api --target x86_64-unknown-linux-gnu

      - uses: actions/upload-artifact@v4
        with:
          name: wakaba_game_service_manage_api
          path: target/x86_64-unknown-linux-gnu/release/wakaba_game_service_manage_api

  create-release-tag:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: wakaba_game_service_manage_api
          path: /tmp/wakaba_game_service_manage_api/

      - name: Package Artifact
        run: tar -czvf /tmp/wakaba_game_service_manage_api.tar.gz -C /tmp wakaba_game_service_manage_api

      - name: Bump version and push tag
        uses: mathieudutour/github-tag-action@v6.2
        id: tag_version
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          release_name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: /tmp/wakaba_game_service_manage_api.tar.gz
          asset_name: wakaba_game_service_manage_api.tar.gz
          asset_content_type: application/gzip

      - name: Set tag output
        run: echo "tag_name=${{ steps.tag_version.outputs.new_tag }}" >> $GITHUB_ENV

  deploy-to-wakaba:
    runs-on: ubuntu-latest
    needs: create-release-tag
    permissions:
      id-token: write
      contents: read

    env:
      AWS_REGION: ap-northeast-1
      AWS_ROLE_TO_ASSUME: arn:aws:iam::616657986447:role/romira_service_manage_bot_v2_github_actions_deploy_role
      INSTANCE_ID: mi-0853a7fab289ebfad
      SOURCE_FILE_PATH: Cargo.toml
      DESTINATION_FILE_PATH: /home/romira/Cargo.toml

    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}


      - name: deploy to wakaba
        run: |
          aws ssm send-command --instance-ids ${{ env.INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters '{"commands":[
              "curl -L -o /tmp/wakaba_game_service_manage_api.tar.gz \"https://github.com/${GITHUB_REPOSITORY}/releases/download/${TAG_NAME}/wakaba_game_service_manage_api.tar.gz\"",
              "tar -xzvf /tmp/wakaba_game_service_manage_api.tar.gz -C /tmp",
              "sudo cp /tmp/wakaba_game_service_manage_api/wakaba_game_service_manage_api /usr/local/wakaba_game_service_manage_api/bin/",
              "sudo systemctl restart wakaba_game_service_manage_api.service"
            ]}' \
            --region $AWS_REGION
